buildscript {
    def kotlin_version = '1.4.30'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.sonarqube" version "3.1.1"
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.grigory-rylov'
def versionValue = '2.0.0'

if (project.hasProperty('release')) {
    version versionValue
} else {
    version "$versionValue-SNAPSHOT"
}

apply plugin: 'kotlin'

ext {
    PUBLISH_GROUP_ID = group
    PUBLISH_ARTIFACT_ID = 'android-instrumental-test-runner'
    PUBLISH_VERSION = version
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://maven.google.com'
    }
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    def kotlin_version = '1.4.30'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.tools.build:gradle:2.3.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.16.0'
    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    implementation gradleApi()
    implementation localGroovy()
    implementation 'io.github.grigory-rylov:test-report:1.4.0'
    implementation 'io.github.grigory-rylov:android-instrumental-test-runner-core:2.0.0-SNAPSHOT'
    // https://mvnrepository.com/artifact/com.android.tools.ddms/ddmlib
    implementation group: 'com.android.tools.ddms', name: 'ddmlib', version: '26.5.0'
}

compileGroovy {
    dependsOn tasks.getByPath('compileKotlin')
    classpath += files(compileKotlin.destinationDir)
}

// sources for unit and integration
sourceSets {
    test {
        java.srcDir 'src/test/unit/java'
    }
    integration {
        java.srcDir 'src/test/integration/java'
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

tasks.sonarqube.dependsOn jacocoTestReport

test {
    jacoco {
        includeNoLocationClasses = true
    }
}

apply from: 'sonar.gradle'

// ./gradlew -Prelease publish
apply from: 'publish.gradle'

